#include <iostream>
#include <math.h>
#include "core/matrix.hpp"
#include "mmio.h"
#include "PCG_ILU.hpp"

using namespace raptor;

//double sparse_inner(int row_i, int col_j,std::vector<int> & U_indices,std::vector<int> & U_colptr, std::vector<double> & U_data,std::vector<int> & L_indices,std::vector<int> & L_rowptr, std::vector<double> & L_data);

/*
 * This function performs row diagonal scaling of a COO matrix
 */
void diagonal_scaling(COOMatrix * mat);// matrix in COO format

/*
 * This function performs row diagonal scaling of a CSR matrix
 */
void diagonal_scaling_csr(CSRMatrix * Acsr);//matrix in CSR format

/*
 * This function performs symmetric diagonal row scaling of a CSR matrix
 */
void diagonal_scaling_csr_symmetric(CSRMatrix * Acsr);//matrix in CSR format

/*
 * This function gets the initial guess of the Upper triangular U matrix for the fine grained ICC factorization for a symmetric 
 * matrix U
 */
void initial_guess_U(COOMatrix * mat,//matrix in COO format
					 COOMatrix * U); //Upper triangular matrix in COO format

/*
 * This function gets the initial guess of the lower triangular matrix L and the upper triangular matrix U for the fine grained ILU * factorization for a general non-symmetric matrix 
 */
void initial_guess_L_U(COOMatrix * mat,//matrix in COO format
					   COOMatrix * L,//Lower triangular matrix in COO format
					   COOMatrix * U);//Upper triangular matrix in COO format

/*
 * This function performs a fine grained ILU factorization 
 */
void ilu_fine_grained(CSRMatrix* Lcsr,//matrix L in CSR format
					 CSCMatrix* Ucsc,//matrix U in CSC format
					 std::vector<double> const & aij_L,//data array of the lower triangular part of the matrix A to be factorized  
					 std::vector<double> const & aij_U,//data array of the upper triangular part of the matrix A to be factorized
					 int num_sweeps);//number of sweeps of the fine grained ILU

void icc(CSCMatrix* Lcsc);
/*
 * This function performs a fine grained ICC factorization
 */
void icc_fine_grained(CSCMatrix* Ucsc,//matrix U in CSC format
					  std::vector<double> const & aij_U,//data array of the upper triangular part of the matrix A to be factorized 
					  int num_sweeps,//number of sweeps of the fine grained ICC
					  int numt);//number of threads

/*
 * This function reads in a matrix in matrix market format from a file
 */
COOMatrix* read_matrix(const char * filename);//name of the file to read from

/*
 * This function reads in a block diagonal matrix from a file generated by a python script
 */
COOMatrix* read_matrix2(const char * filename);//name of the file to read from

/*
 * This function prints a matrix in matrix market format to a file 
 */
void printInMM(COOMatrix * mat);//matrix in COO format

