	if (!slv->options.algebraic) {
		ierr = KSPGetPC(slv->ksp, &slv->pc);
		ierr = PCSetType(slv->pc, PCSHELL);CHKERRQ(ierr);
		ierr = ef_pc_create(&shell);CHKERRQ(ierr);
		ierr = PCShellSetApply(slv->pc, ef_pc_apply);CHKERRQ(ierr);
		ierr = PCShellSetDestroy(slv->pc, ef_pc_destroy);CHKERRQ(ierr);
		ierr = PCShellSetContext(slv->pc, shell);CHKERRQ(ierr);
		ierr = PCShellSetName(slv->pc, "boxmg");CHKERRQ(ierr);
		ierr = PCShellSetSetUp(slv->pc, ef_pc_setup);CHKERRQ(ierr);
	}

	ierr = KSPSetFromOptions(slv->ksp);CHKERRQ(ierr);

	if (!slv->options.algebraic) {
		ef_bmg2_mat *mat_ctx = (ef_bmg2_mat*) malloc(sizeof(ef_bmg2_mat));
		mat_ctx->op = bmg2_operator_create(slv->grid.topo);
		ierr = MatCreateShell(slv->comm, xm*ym, xm*ym, ngx*ngy, ngx*ngy, mat_ctx, &slv->A);CHKERRQ(ierr);
		ierr = MatShellSetOperation(slv->A, MATOP_MULT, (void(*)(void)) ef_bmg2_mult);CHKERRQ(ierr);
	} else {
		ierr = DMCreateMatrix(slv->dm, &slv->A);CHKERRQ(ierr);
	}
